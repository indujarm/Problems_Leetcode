https://leetcode.com/problems/maximum-sum-of-distinct-subarrays-with-length-k/description/

class Solution {
public:
    long long maximumSubarraySum(vector<int>& nums, int k) {
        int n= nums.size();
        unordered_map<int,int> freq;
        long long sum =0, ans =0;
        for(int i =0;i<k;i++)
        {
            freq[nums[i]]++;
            sum+=nums[i];
        }
        if(freq.size()==k)
        {
            ans = sum;
        }
        for(int i = k;i<n;i++)
        {
            freq[nums[i]]++;
            sum+=nums[i]-nums[i-k];
            freq[nums[i-k]]--;

            if(freq[nums[i-k]]==0)
            freq.erase(freq.find(nums[i-k]));

            if(freq.size()==k)
            ans = max(ans,sum);
        }
        return ans;
    }
};
